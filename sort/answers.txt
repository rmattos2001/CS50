sort1 uses: Bubble sort.

How do you know?: it was very very fast, showing that it's probably bubble, because when sorted it just needs
to check the sequence one time.

sort2 uses: Merge sort.

How do you know?: It's times were the fastest and stablest even for the largest files,
showing that it's probably merge, because it handles very good with long sequences.

sort3 uses: Selection sort.

How do you know?: By elimination, and it's times were very stable, showing if it's already sorted or no, it needs a
certain amount of steps to conclude that it's sorted but it was slower than sort2, so it's not merge sort..

times:

sort1:

random5000.txt    :real    0m0,077s
random10000.txt   :real    0m0,229s
random50000.txt   :real    0m5,905s

reversed5000.txt  :real    0m0,071s
reversed10000.txt :real    0m0,249s
reversed50000.txt :real    0m5,905s

sorted5000.txt    :real    0m0,020s
sorted10000.txt   :real    0m0,089s
sorted50000.txt   :real    0m0,664s

sort2:

random5000.txt    : real    0m0,019s
random10000.txt   : real    0m0,047s
random50000.txt   : real    0m0,661s

reversed5000.txt  : real    0m0,026s
reversed10000.txt : real    0m0,064s
reversed50000.txt : real    0m0,619s

sorted5000.txt    : real    0m0,034s
sorted10000.txt   : real    0m0,037s
sorted50000.txt   : real    0m0,630s

sort3:

random5000.txt    : real    0m0,041s
random10000.txt   : real    0m0,140s
random50000.txt   : real    0m2,387s

reversed5000.txt  : real    0m0,065s
reversed50000.txt : real    0m0,160s
reversed50000.txt : real    0m2,621s

sorted5000.txt    : real    0m0,037s
sorted10000.txt   : real    0m0,151s
sorted50000.txt   : real    0m2,252s